// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  profiles      Profile[]
  jobs          Job[]
  personalInfo  PersonalInfo?
  experiences   Experience[]
  educations    Education[]
  projects      Project[]
  skills        Skill[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Personal Information (normalized - one per user)
model PersonalInfo {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  location  String?
  website   String?
  headline  String?
  summary   String?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialLinks SocialLink[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("personal_info")
}

model SocialLink {
  id             String      @id @default(cuid())
  personalInfoId String
  platform       String      // e.g., "linkedin", "github", "twitter"
  url            String
  
  personalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id], onDelete: Cascade)
  
  @@unique([personalInfoId, platform])
  @@map("social_links")
}

// Job Tracking System
model Job {
  id            String    @id @default(cuid())
  userId        String
  title         String
  company       String
  description   String?
  requirements  String?
  responsibilities String?
  skills        String?
  url           String?
  source        String    @default("manual") // "manual" or "extension"
  extractedAt   DateTime?
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profiles      Profile[] // Jobs can have multiple associated profiles/resumes
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([userId, source])
  @@index([userId, createdAt])
  @@map("jobs")
}

// Profile System
model Profile {
  id                       String    @id @default(cuid())
  userId                   String
  profileName              String
  templateName             String?
  jobId                    String?   // Link to the job this profile was created for
  
  // JSON configuration for resume customization
  resumeConfiguration      Json?     // Colors, fonts, layout preferences
  
  // AI Optimization tracking
  aiOptimizationJobUrl     String?
  aiOptimizationJobDescHash String?
  
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job                      Job?      @relation(fields: [jobId], references: [id], onDelete: SetNull)
  
  // Profile items (polymorphic relationship)
  items                    ProfileItem[]
  
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  
  @@map("profiles")
}

// Generic profile item system (replaces 4 junction tables)
model ProfileItem {
  id        String   @id @default(cuid())
  profileId String
  itemType  String   // "experience", "education", "project", "skill"
  itemId    String   // Reference to the actual item
  order     Int      // Display order within the profile
  
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([profileId, itemType, itemId])
  @@index([profileId, itemType, order])
  @@map("profile_items")
}

// Experience System
model Experience {
  id          String   @id @default(cuid())
  userId      String
  company     String
  title       String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bullets     ExperienceBullet[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, startDate])
  @@map("experiences")
}

model ExperienceBullet {
  id           String     @id @default(cuid())
  experienceId String
  content      String
  order        Int
  
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  
  @@index([experienceId, order])
  @@map("experience_bullets")
}

// Education System
model Education {
  id          String   @id @default(cuid())
  userId      String
  institution String
  degree      String
  field       String?
  location    String?
  startDate   DateTime
  endDate     DateTime?
  gpa         String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, startDate])
  @@map("educations")
}

// Project System
model Project {
  id        String   @id @default(cuid())
  userId    String
  title     String
  link      String?
  startDate DateTime?
  endDate   DateTime?
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bullets   ProjectBullet[]
  tags      ProjectTag[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@map("projects")
}

model ProjectBullet {
  id        String  @id @default(cuid())
  projectId String
  content   String
  order     Int
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId, order])
  @@map("project_bullets")
}

model ProjectTag {
  id        String  @id @default(cuid())
  projectId String
  name      String
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@map("project_tags")
}

// Skill System
model Skill {
  id       String @id @default(cuid())
  userId   String
  name     String
  details  String?
  category String? // e.g., "Technical", "Language", "Soft Skills"
  level    String? // e.g., "Beginner", "Intermediate", "Advanced"
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, category])
  @@map("skills")
}
