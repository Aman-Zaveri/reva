generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  educations    Education[]
  experiences   Experience[]
  personalInfo  PersonalInfo?
  projects      Project[]
  sessions      Session[]
  skills        Skill[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PersonalInfo {
  id        String   @id @default(cuid())
  email     String?
  phone     String?
  linkedin  String?
  github    String?
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  firstName String?
  lastName  String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personal_info")
}

model Experience {
  id        String             @id @default(cuid())
  title     String
  company   String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  endDate   DateTime?
  location  String?
  startDate DateTime?
  userId    String
  bullets   ExperienceBullet[]
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startDate])
  @@map("experiences")
}

model ExperienceBullet {
  id           String     @id @default(cuid())
  experienceId String
  content      String
  order        Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@index([experienceId, order])
  @@map("experience_bullets")
}

model Education {
  id                 String    @id @default(cuid())
  userId             String
  institution        String
  degree             String
  gpa                String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  relevantCoursework String?
  graduationDate     DateTime?
  minor              String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, graduationDate])
  @@map("educations")
}

model Project {
  id        String          @id @default(cuid())
  title     String
  link      String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  date      DateTime?
  bullets   ProjectBullet[]
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("projects")
}

model ProjectBullet {
  id        String  @id @default(cuid())
  projectId String
  content   String
  order     Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, order])
  @@map("project_bullets")
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, category])
  @@map("skills")
}
